@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Register</h3>
<div class="register-form">
    <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label>Username</label>
            <InputText @bind-Value="registerModel.Username" class="form-control" @oninput="OnUsernameInput" />
        </div>
        <div>
            <label>Email</label>
            <InputText @bind-Value="registerModel.Email" class="form-control" />
        </div>
        <div>
            <label>Password</label>
            <InputText @bind-Value="registerModel.Password" type="password" class="form-control" @oninput="OnPasswordInput" />
        </div>
        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>
    <div style="margin-top:12px">
        <NavLink href="/login">???????????? ???????????</NavLink>
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="text-danger">@errorMessage</div>
    }
</div>

@code {
    public class RegisterModel
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    RegisterModel registerModel = new();
    string? errorMessage;
    string? babyApiBaseUrl;

    protected override async Task OnInitializedAsync()
    {
        // Load config from appsettings.json
        var config = await Http.GetFromJsonAsync<AppConfig>("appsettings.json");
        babyApiBaseUrl = config?.BabyApiBaseUrl;
    }

    private void OnUsernameInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var filtered = System.Text.RegularExpressions.Regex.Replace(input, "[^a-zA-Z0-9]", "");
        if (filtered != registerModel.Username)
        {
            registerModel.Username = filtered;
        }
    }
    private void OnPasswordInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var filtered = System.Text.RegularExpressions.Regex.Replace(input, "[^a-zA-Z0-9]", "");
        if (filtered != registerModel.Password)
        {
            registerModel.Password = filtered;
        }
    }

    private async Task HandleRegister()
    {
        errorMessage = null;
        if (string.IsNullOrEmpty(babyApiBaseUrl))
        {
            errorMessage = "API endpoint not configured.";
            return;
        }
        if (string.IsNullOrEmpty(registerModel.Password))
        {
            errorMessage = "Password must contain only English letters and numbers.";
            return;
        }
        var response = await Http.PostAsJsonAsync($"{babyApiBaseUrl}/users/register", registerModel);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = "Register failed. Please try again.";
        }
    }

    public class AppConfig
    {
        public string BabyApiBaseUrl { get; set; } = string.Empty;
    }
}
