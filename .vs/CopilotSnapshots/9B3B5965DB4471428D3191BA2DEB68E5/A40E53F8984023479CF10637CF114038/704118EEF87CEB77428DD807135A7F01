@page "/login"
@using BabyPOS_Web.ViewModels
@inject HttpClient Http

@code {
    private LoginViewModel vm;
    protected override void OnInitialized()
    {
        vm = new LoginViewModel(Http);
    }
}

<h3>Login</h3>
<div>
    <label>Username</label>
    <input value="@vm.Username" @oninput="OnUsernameInput" />
</div>
<div>
    <label>Password</label>
    <input type="password" value="@vm.Password" @oninput="OnPasswordInput" />
</div>
<button @onclick="OnLogin">Login</button>

<div style="margin-top:12px">
    <NavLink href="/register">Register</NavLink>
</div>

@if (!string.IsNullOrEmpty(vm.ErrorMessage))
{
    <div style="color:red">@vm.ErrorMessage</div>
}
@if (vm.Token != null)
{
    <div style="color:green">Login Success! Token: @vm.Token</div>
}

@code {
    private void OnUsernameInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var filtered = System.Text.RegularExpressions.Regex.Replace(input, "[^a-zA-Z0-9]", "");
        if (filtered != input)
        {
            // อัปเดตค่าใหม่ทันที
            vm.Username = filtered;
            StateHasChanged();
        }
        else
        {
            vm.Username = input;
        }
    }
    private void OnPasswordInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var filtered = System.Text.RegularExpressions.Regex.Replace(input, "[^a-zA-Z0-9]", "");
        if (filtered != input)
        {
            vm.Password = filtered;
            StateHasChanged();
        }
        else
        {
            vm.Password = input;
        }
    }
    private async Task OnLogin()
    {
        await vm.LoginAsync();
    }
}
