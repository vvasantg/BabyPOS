@page "/login"
@layout MainLayout
@using BabyPOS_Web.ViewModels
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

@code {
    private LoginViewModel vm;
    protected override void OnInitialized()
    {
        vm = new LoginViewModel(Http);
    }
}

<div style="max-width: 400px; margin: 0 auto; padding: 24px;">
    <h3 style="text-align: center; margin-bottom: 24px;">เข้าสู่ระบบ</h3>
    
    <div style="margin-bottom: 16px;">
        <label style="display: block; margin-bottom: 4px;">ชื่อผู้ใช้</label>
        <InputText @bind-Value="vm.Username" @oninput="OnUsernameInput" class="form-control" />
    </div>
    
    <div style="margin-bottom: 16px;">
        <label style="display: block; margin-bottom: 4px;">รหัสผ่าน</label>
        <InputText @bind-Value="vm.Password" type="password" @oninput="OnPasswordInput" class="form-control" />
    </div>
    
    <button @onclick="OnLogin" class="btn btn-primary" style="width: 100%; margin-bottom: 16px;">เข้าสู่ระบบ</button>

    <div style="text-align: center;">
        <NavLink href="/register">สมัครสมาชิก</NavLink>
    </div>

    @if (!string.IsNullOrEmpty(vm.ErrorMessage))
    {
        <div style="color:red; text-align: center; margin-top: 16px;">@vm.ErrorMessage</div>
    }
</div>

@code {
    private void OnUsernameInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var filtered = System.Text.RegularExpressions.Regex.Replace(input, "[^a-zA-Z0-9]", "");
        if (filtered != vm.Username)
        {
            vm.Username = filtered;
        }
    }
    private void OnPasswordInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var filtered = System.Text.RegularExpressions.Regex.Replace(input, "[^a-zA-Z0-9]", "");
        if (filtered != vm.Password)
        {
            vm.Password = filtered;
        }
    }
    private async Task OnLogin()
    {
        var success = await vm.LoginAsync();
        if (success && !string.IsNullOrEmpty(vm.Token))
        {
            // Save token to localStorage
            await JS.InvokeVoidAsync("localStorage.setItem", "jwt", vm.Token);
            // Force reload to update ShopList state
            Navigation.NavigateTo("/", true);
        }
    }
}
