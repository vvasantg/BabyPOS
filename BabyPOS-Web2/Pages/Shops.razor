@page "/shops"
@using BabyPOS_Web2.Application.DTOs
@inject BabyPOS_Web2.Infrastructure.Services.IApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>ร้านค้าทั้งหมด</PageTitle>

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">ร้านค้าทั้งหมด</h2>
        <div class="d-flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshShops">
                <i class="fas fa-sync-alt me-2"></i>
                รีเฟรช
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>กำลังโหลดร้านค้า...</p>
        </div>
    }
    else if (!shops.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-store fa-4x text-muted mb-3"></i>
            <h5 class="text-muted">ยังไม่มีร้านค้า</h5>
            <p class="text-muted">เริ่มต้นด้วยการเพิ่มร้านค้าแรกของคุณ</p>
        </div>
    }
    else
    {
        <div class="shops-grid">
            @foreach (var shop in shops)
            {
                <div class="shop-card" @onclick="() => NavigateToShop(shop.Id)">
                    <div class="shop-image-container">
                        @{
                            var shopImage = GetShopImage(shop);
                        }
                        <img src="@shopImage" 
                             alt="@shop.Name" 
                             class="shop-image"
                             onerror="this.src='/img/food/placeholder.png';" />
                    </div>
                    <div class="shop-name">@shop.Name</div>
                    <div class="shop-id">ร้านที่ @shop.Id</div>
                </div>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-4">
            <strong>Error:</strong> @errorMessage
        </div>
    }
</div>

@code {
    private List<ShopDto> shops = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private Dictionary<int, List<MenuItemDto>> shopMenuItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadShops();
    }

    private async Task LoadShops()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            shops = await ApiService.GetShopsAsync();
            
            // Load menu items for each shop to get images
            shopMenuItems.Clear();
            foreach (var shop in shops)
            {
                try
                {
                    var menuItems = await ApiService.GetShopMenuItemsAsync(shop.Id);
                    shopMenuItems[shop.Id] = menuItems;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to load menu items for shop {shop.Id}: {ex.Message}");
                    shopMenuItems[shop.Id] = new List<MenuItemDto>();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"เกิดข้อผิดพลาดในการโหลดข้อมูล: {ex.Message}";
            shops = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshShops()
    {
        await LoadShops();
    }

    private void NavigateToShop(int shopId)
    {
        NavigationManager.NavigateTo($"/food-list/{shopId}");
    }

    private string GetShopImage(ShopDto shop)
    {
        // Try to get the first available menu item image for the shop
        if (shopMenuItems.TryGetValue(shop.Id, out var menuItems) && menuItems.Any())
        {
            var imageItem = menuItems.FirstOrDefault(m => !string.IsNullOrEmpty(m.ImagePath));
            if (imageItem != null)
            {
                return imageItem.ImagePath!;
            }
        }
        
        // Fallback to default placeholder
        return "/img/food/placeholder.png";
    }
}
