@using Microsoft.JSInterop

<div class="top-bar">
    <div class="top-bar-left">
        <button class="menu-toggle" @onclick="ToggleSidebar">
            <i class="fas fa-bars"></i>
        </button>
        <div class="breadcrumb">
            <span>@GetCurrentPageTitle()</span>
        </div>
    </div>

    <div class="top-bar-center">
        <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="ค้นหา..." @bind="searchText" @onkeypress="HandleSearch" />
        </div>
    </div>

    <div class="top-bar-right">
        <div class="notifications">
            <button class="notification-btn">
                <i class="fas fa-bell"></i>
                <span class="notification-badge">3</span>
            </button>
        </div>

        <div class="user-menu">
            <button class="user-btn" @onclick="ToggleUserMenu">
                <i class="fas fa-user-circle"></i>
                <span>ผู้ใช้งาน</span>
                <i class="fas fa-chevron-down"></i>
            </button>
            
            @if (showUserMenu)
            {
                <div class="user-dropdown">
                    <a href="/profile">
                        <i class="fas fa-user"></i>
                        โปรไฟล์
                    </a>
                    <a href="/settings">
                        <i class="fas fa-cog"></i>
                        ตั้งค่า
                    </a>
                    <hr />
                    <a href="/about">
                        <i class="fas fa-info-circle"></i>
                        เกี่ยวกับ
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    
    private string searchText = "";
    private bool showUserMenu = false;
    private string currentPath = "";

    protected override void OnInitialized()
    {
        currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        Navigation.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentPath = Navigation.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private string GetCurrentPageTitle()
    {
        return currentPath switch
        {
            "" => "หน้าหลัก",
            "shops" => "ร้านค้า",
            "shops-management" => "จัดการร้านค้า",
            "orders" => "จัดการออเดอร์",
            "menu" => "เมนูอาหาร",
            "login" => "เข้าสู่ระบบ",
            "about" => "เกี่ยวกับ",
            _ => "BabyPOS"
        };
    }

    private async Task ToggleSidebar()
    {
        await JS.InvokeVoidAsync("document.body.classList.toggle", "sidebar-collapsed");
    }

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private Task HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(searchText))
        {
            // Implement search functionality
            Console.WriteLine($"Searching for: {searchText}");
        }
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
