@page "/shops-management"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using BabyPOS_Web2.Application.DTOs
@using BabyPOS_Web2.Presentation.Components
@inject BabyPOS_Web2.Infrastructure.Services.IApiService ApiService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Shops Management</PageTitle>

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
        <div>
            <button class="btn btn-success me-2" @onclick="ShowAddShopModal">
                <i class="bi bi-plus-circle"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            </button>
            <button class="btn btn-outline-primary" @onclick="RefreshShops">
                <i class="bi bi-arrow-clockwise"></i> ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤...</p>
        </div>
    }
    else if (shops.Count == 0)
    {
        <div class="alert alert-info text-center">
            <h4>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</h4>
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Ñ‡∏•‡∏¥‡∏Å "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</p>
        </div>
    }
    else
    {
        <ShopCardCarousel TShop="ShopDto" 
                         Shops="shops" 
                         GetShopName="shop => shop.Name" 
                         GetShopDescription="shop => shop.Description" 
                         GetShopImages="GetShopImages"
                         GetShopMenuItems="GetShopMenuItems">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <small class="text-muted">Shop ID: @context.Id</small>
                </div>
                <div class="btn-group">
                    <a class="btn btn-outline-primary btn-sm" href="@($"/food-list/{context.Id}")">
                        <i class="bi bi-list"></i> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
                    </a>
                    <button class="btn btn-outline-warning btn-sm" @onclick="() => ShowEditShopModal(context)">
                        <i class="bi bi-pencil"></i> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    </button>
                    <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowDeleteConfirmModal(context)">
                        <i class="bi bi-trash"></i> ‡∏•‡∏ö
                    </button>
                </div>
            </div>
        </ShopCardCarousel>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            <strong>Error:</strong> @errorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">
            <strong>Success:</strong> @successMessage
        </div>
    }
</div>

<!-- Add/Edit Shop Modal -->
<div class="modal fade @(showShopModal ? "show d-block" : "")" tabindex="-1" style="@(showShopModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditMode ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")</h5>
                <button type="button" class="btn-close" @onclick="HideShopModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô</label>
                    <input class="form-control" @bind="currentShop.Name" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô" />
                </div>
                <div class="mb-3">
                    <label class="form-label">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</label>
                    <textarea class="form-control" @bind="currentShop.Description" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideShopModal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                <button type="button" class="btn btn-primary" @onclick="SaveShop" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    @(isEditMode ? "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô")
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade @(showDeleteModal ? "show d-block" : "")" tabindex="-1" style="@(showDeleteModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö</h5>
                <button type="button" class="btn-close" @onclick="HideDeleteModal"></button>
            </div>
            <div class="modal-body">
                <p>‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô <strong>@shopToDelete?.Name</strong> ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</p>
                <p class="text-danger"><small>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideDeleteModal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteShop" disabled="@isDeleting">
                    @if (isDeleting)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    ‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ShopDto> shops = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private Dictionary<int, List<MenuItemDto>> shopMenuItems = new();

    // Modal states
    private bool showShopModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private bool isDeleting = false;

    // Current shop data
    private ShopDto currentShop = new();
    private ShopDto? shopToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadShops();
    }

    private async Task LoadShops()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            Console.WriteLine("üìã Loading shops for management...");
            
            shops = await ApiService.GetShopsForManagementAsync();
            Console.WriteLine($"üìã Loaded {shops.Count} shops");
            
            // Load menu items for each shop
            shopMenuItems.Clear();
            foreach (var shop in shops)
            {
                try
                {
                    var menuItems = await ApiService.GetShopMenuItemsAsync(shop.Id);
                    shopMenuItems[shop.Id] = menuItems;
                    Console.WriteLine($"üçΩÔ∏è Loaded {menuItems.Count} menu items for shop {shop.Id}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Failed to load menu items for shop {shop.Id}: {ex.Message}");
                    shopMenuItems[shop.Id] = new List<MenuItemDto>();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {ex.Message}";
            Console.WriteLine($"‚ùå LoadShops failed: {ex.Message}");
            shops = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshShops()
    {
        successMessage = string.Empty;
        await LoadShops();
    }

    private IEnumerable<string> GetShopImages(ShopDto shop)
    {
        // Get real menu item images from API data
        if (shopMenuItems.TryGetValue(shop.Id, out var menuItems) && menuItems.Any())
        {
            return menuItems
                .Where(m => !string.IsNullOrEmpty(m.ImagePath))
                .Select(m => m.ImagePath!)
                .Take(3);
        }
        
        // Fallback to default image
        return new List<string> { "/img/food/default.png" };
    }

    private IEnumerable<MenuItemDto> GetShopMenuItems(ShopDto shop)
    {
        // Return real menu items from API
        if (shopMenuItems.TryGetValue(shop.Id, out var menuItems))
        {
            return menuItems.Take(3);
        }
        
        return new List<MenuItemDto>();
    }

    // Modal methods
    private void ShowAddShopModal()
    {
        currentShop = new ShopDto();
        isEditMode = false;
        showShopModal = true;
    }

    private void ShowEditShopModal(ShopDto shop)
    {
        currentShop = new ShopDto
        {
            Id = shop.Id,
            Name = shop.Name,
            Description = shop.Description,
            OwnerId = shop.OwnerId
        };
        isEditMode = true;
        showShopModal = true;
    }

    private void HideShopModal()
    {
        showShopModal = false;
        currentShop = new();
    }

    private void ShowDeleteConfirmModal(ShopDto shop)
    {
        shopToDelete = shop;
        showDeleteModal = true;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
        shopToDelete = null;
    }

    private async Task<int?> GetCurrentUserIdFromJwt()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt");
            if (string.IsNullOrEmpty(token))
                return null;

            // Decode JWT payload (simple base64 decode)
            var parts = token.Split('.');
            if (parts.Length != 3)
                return null;

            var payload = parts[1];
            // Add padding if needed
            switch (payload.Length % 4)
            {
                case 2: payload += "=="; break;
                case 3: payload += "="; break;
            }

            var jsonBytes = Convert.FromBase64String(payload);
            var jsonString = System.Text.Encoding.UTF8.GetString(jsonBytes);
            var jsonDoc = System.Text.Json.JsonDocument.Parse(jsonString);
            
            if (jsonDoc.RootElement.TryGetProperty("sub", out var subElement) ||
                jsonDoc.RootElement.TryGetProperty("nameid", out subElement) ||
                jsonDoc.RootElement.TryGetProperty("userId", out subElement))
            {
                if (int.TryParse(subElement.GetString(), out var userId))
                    return userId;
            }

            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing JWT: {ex.Message}");
            return null;
        }
    }

    private async Task SaveShop()
    {
        try
        {
            isSaving = true;
            errorMessage = string.Empty;
            Console.WriteLine("üè™ Starting SaveShop process...");

            if (string.IsNullOrWhiteSpace(currentShop.Name))
            {
                errorMessage = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô";
                Console.WriteLine("‚ùå Validation failed: Shop name is empty");
                return;
            }

            if (isEditMode)
            {
                Console.WriteLine($"üìù Updating shop ID: {currentShop.Id}, Name: {currentShop.Name}");
                Console.WriteLine($"üì§ Sending PUT request to /api/shops/{currentShop.Id}");
                // Update existing shop
                var success = await ApiService.UpdateShopAsync(currentShop);
                if (success)
                {
                    successMessage = "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß";
                    Console.WriteLine("‚úÖ Shop updated successfully");
                    HideShopModal();
                    await LoadShops();
                }
                else
                {
                    errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πâ‡∏≤‡∏ô - API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ JWT ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)";
                    Console.WriteLine("‚ùå Shop update failed");
                }
            }
            else
            {
                Console.WriteLine($"üÜï Creating new shop: {currentShop.Name}");
                // Create new shop - API will get Owner ID from JWT token automatically
                Console.WriteLine($"üì§ Sending shop data without OwnerId (API will set it from JWT)");
                
                // Don't set OwnerId - let API handle it from JWT
                var shopData = new ShopDto 
                { 
                    Name = currentShop.Name,
                    Description = currentShop.Description 
                };
                
                var newShop = await ApiService.CreateShopAsync(shopData);
                if (newShop != null)
                {
                    successMessage = "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß";
                    Console.WriteLine($"‚úÖ New shop created successfully with ID: {newShop.Id}");
                    HideShopModal();
                    await LoadShops();
                }
                else
                {
                    errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô - API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö 405 Method Not Allowed (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà endpoint ‡∏´‡∏£‡∏∑‡∏≠ authorization)";
                    Console.WriteLine("‚ùå Shop creation failed - API returned null");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {ex.Message}";
            Console.WriteLine($"‚ùå Exception in SaveShop: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteShop()
    {
        if (shopToDelete == null) return;

        try
        {
            isDeleting = true;
            errorMessage = string.Empty;
            Console.WriteLine($"üóëÔ∏è Deleting shop: ID={shopToDelete.Id}, Name={shopToDelete.Name}");

            var success = await ApiService.DeleteShopAsync(shopToDelete.Id);
            if (success)
            {
                successMessage = $"‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô {shopToDelete.Name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß";
                Console.WriteLine($"‚úÖ Shop deleted successfully: {shopToDelete.Name}");
                HideDeleteModal();
                await LoadShops();
            }
            else
            {
                errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô - API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ JWT ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)";
                Console.WriteLine($"‚ùå Shop deletion failed for ID: {shopToDelete.Id}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {ex.Message}";
            Console.WriteLine($"‚ùå Exception in DeleteShop: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
        }
    }
}
