@page "/order/{ShopId:int}"
@using BabyPOS_Web2.Application.DTOs
@inject BabyPOS_Web2.Infrastructure.Services.IApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>Order</PageTitle>

<div class="container py-3">
    <h2>@ShopDetail</h2>
    <!-- Table Selection -->
    <div class="mb-3">
        <label class="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):</label>
        <select class="form-select" @bind="selectedTableId" disabled="@isTableLocked">
            <option value="0">-- ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏ï‡πä‡∏∞ --</option>
            @foreach (var table in tables)
            {
                <option value="@table.Id">@table.Name</option>
            }
        </select>
        @if (isTableLocked)
        {
            <small class="text-muted">‡πÇ‡∏ï‡πä‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô QR Code)</small>
        }
    </div>
    <!-- Category Tabs with Cart Icon -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <ul class="nav nav-tabs flex-grow-1">
            @foreach (var cat in CategoryTabs)
            {
                <li class="nav-item">
                    <button type="button" class="nav-link @(SelectedCategory == cat.Value ? "active" : "")" @onclick="() => SelectCategory(cat.Value)">@cat.Label</button>
                </li>
            }
        </ul>
        <!-- Cart Icon -->
        <button class="btn btn-success btn-lg rounded-circle position-relative ms-3" @onclick="ShowOrderSummary" title="‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£">
            üõí
            @if (CartItems.Any())
            {
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    @CartItems.Sum(c => c.Quantity)
                </span>
            }
        </button>
    </div>
    @if (!FilteredMenuItems.Any())
    {
        <div class="text-center text-muted py-5">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
    }
    else
    {
        <div class="row g-3">
            @foreach (var chunk in FilteredMenuItems.Chunk(3))
            {
                @foreach (var item in chunk)
                {
                    <div class="col-12 col-md-4 d-flex">
                        <div class="card flex-fill">
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(item.ImagePath))
                                {
                                    <img src="@item.ImagePath" alt="@item.Name" style="width:100%;max-width:120px;max-height:120px;object-fit:cover;display:block;margin:auto;" />
                                }
                                else
                                {
                                    <img src="/img/food/default.png" alt="no image" style="width:100%;max-width:120px;max-height:120px;object-fit:cover;display:block;margin:auto;opacity:0.5;" />
                                }
                                <h5 class="card-title mt-2">@item.Name</h5>
                                <div class="fw-bold">‡∏ø@item.Price</div>
                                <!-- ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ -->
                                <div class="mt-2">
                                    <button class="btn btn-sm btn-success w-100" @onclick="() => ShowQuantityModal(item)">‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

<!-- Quantity Selection Modal -->
@if (showQuantityModal && selectedMenuItem != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.3);">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</h5>
                    <button type="button" class="btn-close" @onclick="HideQuantityModal"></button>
                </div>
                <div class="modal-body text-center">
                    <img src="@selectedMenuItem.ImagePath" alt="@selectedMenuItem.Name" style="width:80px;height:80px;object-fit:cover;" class="mb-3" />
                    <h6>@selectedMenuItem.Name</h6>
                    <p class="text-success fw-bold">‡∏ø@selectedMenuItem.Price</p>
                    <div class="d-flex justify-content-center align-items-center gap-3 my-3">
                        <button class="btn btn-outline-secondary btn-lg" @onclick="DecreaseModalQuantity">-</button>
                        <span class="fs-4 fw-bold mx-3">@modalQuantity</span>
                        <button class="btn btn-outline-secondary btn-lg" @onclick="IncreaseModalQuantity">+</button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideQuantityModal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                    <button class="btn btn-success" @onclick="AddToOrderFromModal" disabled="@(modalQuantity <= 0)">
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (@modalQuantity)
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Order Summary Modal -->
@if (showOrderModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.3);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå - @ShopDetail</h5>
                    <button type="button" class="btn-close" @onclick="HideOrderModal"></button>
                </div>
                <div class="modal-body">
                    <!-- Table Info -->
                    <div class="mb-3 p-2 bg-light rounded">
                        <strong>‡πÇ‡∏ï‡πä‡∏∞: </strong>@GetSelectedTableName()
                    </div>
                    <!-- Service Type Selection -->
                    <div class="mb-3">
                        <label class="form-label fw-bold">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="serviceType" id="dineIn" value="dineIn" checked="@(selectedServiceType == "dineIn")" @onchange="@(() => selectedServiceType = "dineIn")" />
                            <label class="form-check-label" for="dineIn">‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="serviceType" id="takeaway" value="takeaway" checked="@(selectedServiceType == "takeaway")" @onchange="@(() => selectedServiceType = "takeaway")" />
                            <label class="form-check-label" for="takeaway">‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô (‡∏°‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏á)</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="serviceType" id="delivery" value="delivery" checked="@(selectedServiceType == "delivery")" @onchange="@(() => selectedServiceType = "delivery")" />
                            <label class="form-check-label" for="delivery">‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô (‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á)</label>
                        </div>
                    </div>
                    <hr>
                    <!-- Order Items -->
                    @if (CartItems.Any())
                    {
                        @foreach (var cartItem in CartItems)
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>
                                    <strong>@cartItem.Name</strong><br>
                                    <small>‡∏ø@cartItem.Price x @cartItem.Quantity</small>
                                </div>
                                <div class="text-end">
                                    <strong>‡∏ø@(cartItem.Price * cartItem.Quantity)</strong>
                                    <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => RemoveFromCart(cartItem.MenuItemId)">‡∏•‡∏ö</button>
                                </div>
                            </div>
                        }
                        <hr>
                        <div class="d-flex justify-content-between">
                            <strong>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong>
                            <strong class="text-success">‡∏ø@CartItems.Sum(c => c.Price * c.Quantity)</strong>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideOrderModal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                    @if (CartItems.Any())
                    {
                        <button class="btn btn-success" @onclick="SubmitOrder" disabled="@isSubmittingOrder">
                            @if (isSubmittingOrder)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private record CategoryTab(string Label, int? Value);
    List<CategoryTab> CategoryTabs = new()
    {
        new("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", null),
        new("‡∏≠‡∏≤‡∏´‡∏≤‡∏£", 0),
        new("‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô", 1),
        new("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", 2),
        new("‡∏≠‡∏∑‡πà‡∏ô‡πÜ", 3)
    };
    int? SelectedCategory = null;
    IEnumerable<MenuItemDto> FilteredMenuItems =>
        SelectedCategory == null ? MenuItems : MenuItems.Where(m => (int)m.Category == SelectedCategory);

    void SelectCategory(int? cat)
    {
        SelectedCategory = cat;
    }

    [Parameter] public int ShopId { get; set; }
    string ShopDetail = "";
    List<MenuItemDto> MenuItems = new();
    List<CartItemVM> CartItems = new();
    List<TableVM> tables = new();
    int selectedTableId = 0;
    bool isTableLocked = false;
    bool showOrderModal = false;
    bool showQuantityModal = false;
    bool isSubmittingOrder = false;
    MenuItemDto? selectedMenuItem = null;
    int modalQuantity = 1;
    string selectedServiceType = "dineIn";

    protected override async Task OnInitializedAsync()
    {
        await LoadShopInfoAsync();
        await LoadTablesAsync();
        await LoadMenuItemsAsync();
        // Check if table is locked via query parameter (simulate QR scan)
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;
        if (query.Contains("tableId="))
        {
            var tableIdParam = query.Split("tableId=")[1].Split('&')[0];
            if (int.TryParse(tableIdParam, out var tableId))
            {
                selectedTableId = tableId;
                isTableLocked = true;
            }
        }
    }

    async Task LoadTablesAsync()
    {
        try
        {
            var tableDtos = await ApiService.GetTablesByShopAsync(ShopId);
            tables = tableDtos.Select(t => new TableVM
            {
                Id = t.Id,
                Name = t.Name,
                ShopId = t.ShopId
            }).ToList();
        }
        catch { tables = new(); }
    }

    async Task LoadShopInfoAsync()
    {
        try
        {
            var shop = await ApiService.GetShopAsync(ShopId);
            if (shop != null)
            {
                ShopDetail = shop.Name;
            }
        }
        catch { ShopDetail = ""; }
    }

    async Task LoadMenuItemsAsync()
    {
        try
        {
            var result = await ApiService.GetShopMenuItemsAsync(ShopId);
            MenuItems = (result ?? new()).Select(m => new MenuItemDto {
                Id = m.Id,
                Name = m.Name,
                Price = m.Price,
                ShopId = m.ShopId,
                ImagePath = m.ImagePath ?? string.Empty,
                Category = m.Category
            }).ToList();
        }
        catch { MenuItems = new(); }
        StateHasChanged();
    }

    void ShowQuantityModal(MenuItemDto item)
    {
        selectedMenuItem = item;
        modalQuantity = 1;
        showQuantityModal = true;
    }

    void HideQuantityModal()
    {
        showQuantityModal = false;
        selectedMenuItem = null;
        modalQuantity = 1;
    }

    void IncreaseModalQuantity()
    {
        modalQuantity++;
        StateHasChanged();
    }

    void DecreaseModalQuantity()
    {
        if (modalQuantity > 1)
        {
            modalQuantity--;
            StateHasChanged();
        }
    }

    void AddToOrderFromModal()
    {
        if (selectedMenuItem == null || modalQuantity <= 0) return;

        var existingItem = CartItems.FirstOrDefault(c => c.MenuItemId == selectedMenuItem.Id);
        if (existingItem != null)
        {
            existingItem.Quantity += modalQuantity;
        }
        else
        {
            CartItems.Add(new CartItemVM
            {
                MenuItemId = selectedMenuItem.Id,
                Name = selectedMenuItem.Name,
                Price = selectedMenuItem.Price,
                Quantity = modalQuantity
            });
        }
        HideQuantityModal();
        StateHasChanged();
    }

    void ShowOrderSummary()
    {
        showOrderModal = true;
    }

    void HideOrderModal()
    {
        showOrderModal = false;
    }

    string GetSelectedTableName()
    {
        if (selectedTableId == 0)
            return "-";
        var table = tables.FirstOrDefault(t => t.Id == selectedTableId);
        return table?.Name ?? "-";
    }

    void RemoveFromCart(int menuItemId)
    {
        CartItems.RemoveAll(c => c.MenuItemId == menuItemId);
        StateHasChanged();
    }

    async Task SubmitOrder()
    {
        if (!CartItems.Any()) return;
        isSubmittingOrder = true;
        try
        {
            var orderData = new
            {
                ShopId = ShopId,
                TableId = selectedTableId,
                ServiceType = selectedServiceType,
                Items = CartItems.Select(c => new
                {
                    MenuItemId = c.MenuItemId,
                    Quantity = c.Quantity
                }).ToArray()
            };
            var response = await ApiService.SubmitOrderAsync(orderData);
            if (response)
            {
                CartItems.Clear();
                HideOrderModal();
            }
        }
        finally
        {
            isSubmittingOrder = false;
            StateHasChanged();
        }
    }

    // MenuItemDto ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å DTO ‡∏Å‡∏•‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ã‡πâ‡∏≥
    public class TableDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int ShopId { get; set; }
    }

    public class CartItemVM
    {
        public int MenuItemId { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }

    public class TableVM
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int ShopId { get; set; }
    }
}
