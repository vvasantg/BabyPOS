@page "/orders-management"
@using BabyPOS_Web2.Application.DTOs
@using BabyPOS_Web2.Presentation.Components
@inject BabyPOS_Web2.Infrastructure.Services.IApiService ApiService
@inject NavigationManager NavigationManager

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</h2>
        <button class="btn btn-success" @onclick="RefreshShops">
            <i class="bi bi-arrow-clockwise"></i> ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤...</p>
        </div>
    }
    else if (shops.Count == 0)
    {
        <div class="alert alert-info text-center">
            <h4>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</h4>
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á</p>
        </div>
    }
    else
    {
        <ShopCardCarousel TShop="ShopDto" 
                         Shops="shops" 
                         GetShopName="shop => shop.Name" 
                         GetShopDescription="shop => shop.Description" 
                         GetShopImages="GetShopImages"
                         GetShopMenuItems="GetShopMenuItems">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <small class="text-muted">Shop ID: @context.Id</small>
                </div>
                <a class="btn btn-warning btn-sm" href="@($"/shop-orders/{context.Id}")">
                    <i class="bi bi-list-check"></i> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                </a>
            </div>
        </ShopCardCarousel>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            <strong>Error:</strong> @errorMessage
        </div>
    }
</div>

@code {
    private List<ShopDto> shops = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private Dictionary<int, List<MenuItemDto>> shopMenuItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadShops();
    }

    private async Task LoadShops()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            Console.WriteLine("üìã Loading shops for management...");
            shops = await ApiService.GetShopsForManagementAsync();
            Console.WriteLine($"üìã Loaded {shops.Count} shops");

            // Load menu items for each shop
            foreach (var shop in shops)
            {
                try
                {
                    var menuItems = await ApiService.GetShopMenuItemsAsync(shop.Id);
                    shopMenuItems[shop.Id] = menuItems;
                    Console.WriteLine($"üçΩÔ∏è Loaded {menuItems.Count} menu items for shop {shop.Id}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è Failed to load menu items for shop {shop.Id}: {ex.Message}");
                    shopMenuItems[shop.Id] = new List<MenuItemDto>();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {ex.Message}";
            Console.WriteLine($"‚ùå Error loading shops: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshShops()
    {
        await LoadShops();
    }

    private List<string> GetShopImages(ShopDto shop)
    {
        // Return some default images for the carousel
        return new List<string> { "/img/shop/placeholder.png" };
    }

    private List<MenuItemDto> GetShopMenuItems(ShopDto shop)
    {
        return shopMenuItems.ContainsKey(shop.Id) ? shopMenuItems[shop.Id] : new List<MenuItemDto>();
    }
}
