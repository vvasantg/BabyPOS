@page "/shops-menu/{ShopId:int}"
@using BabyPOS_Web2.Application.DTOs
@using BabyPOS_Web2.Domain.Models
@using BabyPOS_Web2.Domain.Enums
@inject BabyPOS_Web2.Infrastructure.Services.IApiService ApiService
@inject NavigationManager NavigationManager

<div class="container py-3">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-outline-secondary" @onclick="GoBack">
            <i class="bi bi-arrow-left"></i> กลับ
        </button>
        <h2 class="mb-0">@ShopDetail</h2>
        <div class="d-flex align-items-center gap-2">
            <span class="badge bg-primary">@CartItems.Count รายการ</span>
            <button class="btn btn-outline-primary" @onclick="ShowCartModal">
                <i class="bi bi-cart"></i> ตะกร้า
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">กำลังโหลด...</span>
            </div>
            <p class="mt-2">กำลังโหลดเมนู...</p>
        </div>
    }
    else if (MenuItems.Count == 0)
    {
        <div class="alert alert-info text-center">
            <h4>ไม่พบเมนูอาหาร</h4>
            <p>ร้านนี้ยังไม่มีเมนูอาหาร</p>
        </div>
    }
    else
    {
        <!-- Category Tabs -->
        <ul class="nav nav-tabs mb-3">
            @foreach (var cat in CategoryTabs)
            {
                <li class="nav-item">
                    <button class="nav-link @(SelectedCategory == cat.Value ? "active" : "")" 
                            @onclick="() => SelectCategory(cat.Value)">
                        @cat.Label
                    </button>
                </li>
            }
        </ul>

        <!-- Menu Items -->
        <div class="row g-3">
            @foreach (var chunk in FilteredMenuItems.Chunk(3))
            {
                @foreach (var item in chunk)
                {
                    <div class="col-12 col-md-4 d-flex">
                        <div class="card h-100 w-100">
                            <img src="@item.ImagePath" class="card-img-top" alt="@item.Name" style="height: 200px; object-fit: cover;">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@item.Name</h5>
                                <p class="card-text text-muted">@GetCategoryName(item.Category)</p>
                                <div class="mt-auto">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="h6 text-primary mb-0">฿@item.Price</span>
                                        <button class="btn btn-primary btn-sm" @onclick="() => ShowQuantityModal(item)">
                                            <i class="bi bi-plus"></i> เพิ่ม
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
</div>

<!-- Quantity Modal -->
@if (showQuantityModal && selectedMenuItem != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">เลือกจำนวน - @selectedMenuItem.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideQuantityModal"></button>
                </div>
                <div class="modal-body text-center">
                    <img src="@selectedMenuItem.ImagePath" class="img-fluid mb-3" style="max-height: 150px;" alt="@selectedMenuItem.Name">
                    <h6>฿@selectedMenuItem.Price</h6>
                    <div class="d-flex justify-content-center align-items-center gap-3 my-3">
                        <button class="btn btn-outline-secondary" @onclick="DecreaseModalQuantity">-</button>
                        <span class="fs-4 fw-bold">@modalQuantity</span>
                        <button class="btn btn-outline-secondary" @onclick="IncreaseModalQuantity">+</button>
                    </div>
                    <p class="text-muted">รวม: ฿@(selectedMenuItem.Price * modalQuantity)</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideQuantityModal">ยกเลิก</button>
                    <button type="button" class="btn btn-primary" @onclick="AddToCart">เพิ่มในตะกร้า</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Cart Modal -->
@if (showCartModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">ตะกร้าสินค้า</h5>
                    <button type="button" class="btn-close" @onclick="HideCartModal"></button>
                </div>
                <div class="modal-body">
                    @if (CartItems.Count == 0)
                    {
                        <p class="text-center text-muted">ตะกร้าว่าง</p>
                    }
                    else
                    {
                        <!-- Table Selection at the top -->
                        <div class="mb-3">
                            <div class="row align-items-center">
                                <div class="col-auto">
                                    <label class="col-form-label">เลือกโต๊ะ (ไม่บังคับ):</label>
                                </div>
                                <div class="col">
                                    <select class="form-select" @bind="selectedTableId">
                                        <option value="">ไม่เลือกโต๊ะ (Takeaway)</option>
                                        @foreach (var table in availableTables)
                                        {
                                            <option value="@table.Id">@table.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Service Type Selection -->
                        <div class="mb-3">
                            <label class="form-label">ประเภทการสั่ง</label>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="serviceType" value="@ServiceType.DineIn" 
                                               @onchange="() => selectedServiceType = ServiceType.DineIn" checked="@(selectedServiceType == ServiceType.DineIn)">
                                        <label class="form-check-label">
                                            ทานที่ร้าน
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="serviceType" value="@ServiceType.Takeaway" 
                                               @onchange="() => selectedServiceType = ServiceType.Takeaway" checked="@(selectedServiceType == ServiceType.Takeaway)">
                                        <label class="form-check-label">
                                            กลับบ้าน
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="serviceType" value="@ServiceType.Delivery" 
                                               @onchange="() => selectedServiceType = ServiceType.Delivery" checked="@(selectedServiceType == ServiceType.Delivery)">
                                        <label class="form-check-label">
                                            ส่ง
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <hr />
                        
                        @foreach (var cartItem in CartItems)
                        {
                            <div class="d-flex justify-content-between align-items-center border-bottom pb-2 mb-2">
                                <div class="d-flex align-items-center">
                                    <img src="@cartItem.ImagePath" style="width: 50px; height: 50px; object-fit: cover;" class="me-2">
                                    <div>
                                        <h6 class="mb-0">@cartItem.Name</h6>
                                        <small class="text-muted">฿@cartItem.Price</small>
                                    </div>
                                </div>
                                <div class="d-flex align-items-center gap-2">
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => DecreaseCartQuantity(cartItem.MenuItemId)">-</button>
                                    <span>@cartItem.Quantity</span>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => IncreaseCartQuantity(cartItem.MenuItemId)">+</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFromCart(cartItem.MenuItemId)">ลบ</button>
                                </div>
                            </div>
                        }
                        <div class="text-end">
                            <h5>รวม: ฿@CartItems.Sum(c => c.Price * c.Quantity)</h5>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideCartModal">ปิด</button>
                    @if (CartItems.Count > 0)
                    {
                        <button type="button" class="btn btn-success" @onclick="SubmitOrder" disabled="@isSubmittingOrder">
                            @if (isSubmittingOrder)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            สั่งซื้อ
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int ShopId { get; set; }
    
    private record CategoryTab(string Label, FoodCategory? Value);
    List<CategoryTab> CategoryTabs = new()
    {
        new("ทั้งหมด", null),
        new("อาหาร", FoodCategory.MainDish),
        new("ของหวาน", FoodCategory.Dessert),
        new("เครื่องดื่ม", FoodCategory.Drink),
        new("อื่นๆ", FoodCategory.Other)
    };
    
    FoodCategory? SelectedCategory = null;
    IEnumerable<MenuItemDto> FilteredMenuItems =>
        SelectedCategory == null ? MenuItems : MenuItems.Where(m => m.Category == SelectedCategory);

    string ShopDetail = "";
    List<MenuItemDto> MenuItems = new();
    bool isLoading = true;
    string errorMessage = string.Empty;
    string successMessage = string.Empty;

    // Cart related variables
    List<CartItemDto> CartItems = new();
    bool showCartModal = false;
    bool showQuantityModal = false;
    bool isSubmittingOrder = false;
    MenuItemDto? selectedMenuItem = null;
    int modalQuantity = 1;
    
    // Table related variables
    List<TableDto> availableTables = new();
    string? selectedTableId = null;
    
    // Service type variables
    ServiceType selectedServiceType = ServiceType.DineIn;

    protected override async Task OnInitializedAsync()
    {
        await LoadShopInfoAsync();
        await LoadMenuItemsAsync();
        await LoadTablesAsync();
    }

    void SelectCategory(FoodCategory? cat)
    {
        SelectedCategory = cat;
    }

    void GoBack() 
    { 
        NavigationManager.NavigateTo("/shops"); 
    }

    async Task LoadShopInfoAsync()
    {
        try
        {
            var shop = await ApiService.GetShopAsync(ShopId);
            if (shop != null)
            {
                ShopDetail = shop.Name;
            }
            else
            {
                ShopDetail = $"ร้านหมายเลข {ShopId}";
                errorMessage = "ไม่พบข้อมูลร้าน";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"เกิดข้อผิดพลาดในการโหลดข้อมูลร้าน: {ex.Message}";
            ShopDetail = $"ร้านหมายเลข {ShopId}";
        }
    }

    async Task LoadMenuItemsAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            MenuItems = await ApiService.GetShopMenuItemsAsync(ShopId);
        }
        catch (Exception ex)
        {
            errorMessage = $"เกิดข้อผิดพลาดในการโหลดเมนู: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    async Task LoadTablesAsync()
    {
        try
        {
            availableTables = await ApiService.GetTablesByShopAsync(ShopId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"เกิดข้อผิดพลาดในการโหลดโต๊ะ: {ex.Message}");
            // ไม่แสดง error message เพราะไม่ใช่ข้อมูลสำคัญ
        }
    }

    string GetCategoryName(FoodCategory category)
    {
        return category switch
        {
            FoodCategory.MainDish => "อาหาร",
            FoodCategory.Dessert => "ของหวาน", 
            FoodCategory.Drink => "เครื่องดื่ม",
            FoodCategory.Other => "อื่นๆ",
            _ => "ไม่ระบุ"
        };
    }

    // Quantity Modal Methods
    void ShowQuantityModal(MenuItemDto item)
    {
        selectedMenuItem = item;
        modalQuantity = 1;
        showQuantityModal = true;
    }

    void HideQuantityModal()
    {
        showQuantityModal = false;
        selectedMenuItem = null;
        modalQuantity = 1;
    }

    void IncreaseModalQuantity()
    {
        modalQuantity++;
    }

    void DecreaseModalQuantity()
    {
        if (modalQuantity > 1)
        {
            modalQuantity--;
        }
    }

    void AddToCart()
    {
        if (selectedMenuItem == null || modalQuantity <= 0) return;

        var existingItem = CartItems.FirstOrDefault(c => c.MenuItemId == selectedMenuItem.Id);
        if (existingItem != null)
        {
            existingItem.Quantity += modalQuantity;
        }
        else
        {
            CartItems.Add(new CartItemDto
            {
                MenuItemId = selectedMenuItem.Id,
                Name = selectedMenuItem.Name,
                Price = selectedMenuItem.Price,
                Quantity = modalQuantity,
                ImagePath = selectedMenuItem.ImagePath ?? "/img/food/default.png"
            });
        }
        
        successMessage = $"เพิ่ม {selectedMenuItem.Name} จำนวน {modalQuantity} ลงตะกร้าแล้ว";
        HideQuantityModal();
        
        // Clear success message after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ => 
        {
            InvokeAsync(() => 
            {
                successMessage = string.Empty;
                StateHasChanged();
            });
        });
    }

    // Cart Modal Methods
    void ShowCartModal()
    {
        showCartModal = true;
    }

    void HideCartModal()
    {
        showCartModal = false;
    }

    void IncreaseCartQuantity(int menuItemId)
    {
        var item = CartItems.FirstOrDefault(c => c.MenuItemId == menuItemId);
        if (item != null)
        {
            item.Quantity++;
        }
    }

    void DecreaseCartQuantity(int menuItemId)
    {
        var item = CartItems.FirstOrDefault(c => c.MenuItemId == menuItemId);
        if (item != null && item.Quantity > 1)
        {
            item.Quantity--;
        }
    }

    void RemoveFromCart(int menuItemId)
    {
        CartItems.RemoveAll(c => c.MenuItemId == menuItemId);
    }

    async Task SubmitOrder()
    {
        if (CartItems.Count == 0) return;

        try
        {
            isSubmittingOrder = true;
            errorMessage = string.Empty;

            // Create order data
            var createOrderDto = new CreateOrderDto
            {
                ShopId = ShopId,
                TableId = string.IsNullOrEmpty(selectedTableId) || selectedTableId == "" ? (int?)null : int.Parse(selectedTableId),
                ServiceType = selectedServiceType.ToApiValue(),
                OrderItems = CartItems.Select(item => new CreateOrderItemDto
                {
                    MenuItemId = item.MenuItemId,
                    Quantity = item.Quantity,
                    Price = item.Price
                }).ToList()
            };

            // Submit order to API
            var result = await ApiService.CreateOrderAsync(createOrderDto);
            
            if (result != null)
            {
                successMessage = $"ทำการสั่งซื้อสำเร็จ! หมายเลขออเดอร์: {result.Id}";
                CartItems.Clear();
                HideCartModal();

                // Clear success message after 5 seconds
                _ = Task.Delay(5000).ContinueWith(_ => 
                {
                    InvokeAsync(() => 
                    {
                        successMessage = string.Empty;
                        StateHasChanged();
                    });
                });
            }
            else
            {
                errorMessage = "ไม่สามารถสร้างออเดอร์ได้ กรุณาลองใหม่อีกครั้ง";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"เกิดข้อผิดพลาดในการสั่งซื้อ: {ex.Message}";
        }
        finally
        {
            isSubmittingOrder = false;
        }
    }
}
